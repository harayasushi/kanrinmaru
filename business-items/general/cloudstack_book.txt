9.1.2	enStratus概要enStratus とは、米国enStratus Networks社が開発したクラウドフェデレーションツール (CFS) ソリューションです。enStratus を導入することで、複数のクラウド環境の運用管理をひとつのインターフェースに集約し、クラウド運用ソフトウェア (CloudStack,OpenStack) や各国間/各地域間のデータセンターで個別に独立していた運用体制を一元化することが可能になります。また、システム/データセンター間でインフラストラクチャを統合管理することで、Amazon EC2 などのパブリック・クラウドと CloudStack などを用いて構築されたプライベート・クラウドを一元的に管理することが可能となります。また、もうひとつの特徴として、enStratus にはインスタンス管理、課金スキーム管理およびインシデント管理などが搭載されています。そのため、これらのバックオフィス業務をクラウド環境に対応させることが可能となります。また、暗号化、アラート、ログ管理機能によりクラウド運用におけるガバナンス体制の強化が可能になることが特徴です。 図9.1.2.1 enStratus の概要  enStratus のメリット  クラウド管理環境として enStratus を導入するメリットとして、(1) 多数のプライベート/パブリック・クラウドをサポートしていること (2) 複数のクラウドでのプロビジョニングを可能とする、インフラストラクチャ管理機能が搭載されていること (3) モニタリング、ファイナンス管理など、クラウドを運用する上で必要不可欠な機能が搭載されていること等が挙げられます。(1) 対応するパブリック・プライベートクラウドenStratus は amazon web service (AWS), rackspace hosting, Windows Azure などといったパブリック・クラウドサービス、CloudStack, OpenStack, Eucalyptus, VMware などといったプライベート・クラウドサービスと接続可能であり、API を介してこれらのクラウドを運用することができます。 　(2) インフラストラクチャ管理機能   enStratus にクラウドを登録するには、クラウドサービスごとに指定されたクレデンシャル情報を入力する必要があります。例えば、AWS の場合 (1) AWS アカウント番号 (2) AWS アクセスキーID (3) AWS 秘密アクセスキー (4) AWS 証明書などを指定する必要があります。   これらの情報を登録することで、enStratus の Web インターフェースを通じてインスタンスの起動/停止/再起動、インスタンスの一覧の表示、ボリュームの作成などを行うことができます。   同様に、CloudStack をはじめとするプライベート・クラウド環境も追加し一括して管理することが可能です。   図9.1.2.2 インフラストラクチャ管理画面　(3) モニタリング、ファイナンス管理機能　多くのパブリック・クラウド環境では利用したリソースの量に基づき課金されます。 enStratus を導入することで、過剰なリソースの利用や予算不足を防ぐことができるようになります。予算設定 (Budget) 機能では、enStratus の中で適用するクラウドリソースの利用可能額を指定することができます。利用可能額として、ソフトクオータとハードクオータのふたつを用意することができます。まず、一ヶ月以内の設定したグループ内における総クラウドリソース使用額がソフトクオータ（警告レベル）に達した場合、警告が行われますがリソース追加を行うことは可能です。しかし、ハードクオータ（制限レベル）に達した場合、新しいリソースを追加することは不可能となります。こうした予算管理は、クラウド毎に紐付けられたアカウントとは別の、独立したグループに設定することが可能です。また、その他の機能としてセキュリティ管理 (キー管理、暗号化)、モニタリング（クラウド上での重要な事象の通知）、自動化（自動スケーリングや自動復旧、バックアップやディザスタリカバリ）などを提供しています。導入事例enStratus はICT系企業のみならず、他の産業での利用実績も豊富です。ここでは、 enStratus の Web サイトに掲載されている企業の導入事例をいくつかご紹介します。(1) グローバルな金融サービスを提供するフィナンシャル企業での例です。この企業では自社内のデータセンター上に構築したプライベート・クラウドおよび複数のパブリック・クラウド環境に様々なアプリケーションを展開しデータを補完していました。enStratus の導入以前は、これらの環境をそれぞれの GUI, API を用いて個別に管理していました。こうした管理の煩雑さを解消するためにenStratusが導入されました。これにより、複数のクラウド環境を一元的なインターフェースで管理することが可能となりました。 (2) オンラインコマース向けプラットフォームを提供する企業での例です。この企業では従来、複数の開発チームが自社データセンター上に構築されたプライベート・クラウドをそれぞれ独立して運用していました。そのため、リソース余剰が発生した場合も他の開発チームがそれらのリソースを利用できないなど、クラウドのメリットを十分に活用できない状態が発生していました。 また、各クラウドが独立して運用されている故に、セキュリティ上の問題が発生していました。このような状況を改善し、全社的な運用コストの最適化、コンプライアンスの実現を達成するため enStratusが導入されました。これにより社内のプライベート・クラウド環境を一元的に管理することで、スケーラビリティを実現することが可能となったのです。 (3) 建設会社での導入例です。この企業では顧客との契約により利用中のアプリケーションおよび顧客データのバックアップを作成し、都度管理する必要が生じました。しかし、従来の運用環境ではクラウド全体のバックアップ作成を定期的に実施し、都度管理を行うことは極めてコストがかかる作業でした。 DR対応を実現し、こうした実運用環境において一貫性のあるガバナンスと自動化を実現するため、enStratus を導入しました。まとめenStratus を導入することで、 (1) パブリック・クラウドおよび CloudStack をはじめとするプライベート・クラウドを利用したマルチクラウドを運用する際の管理コストの最適化 (2) クラウド環境上のインスタンス管理に加え、課金管理などクラウド運用にかかわるバックオフィス業務の簡素化 (3) 暗号化、アラート、ログ管理 (セキュリティ・モニタリング等) により、クラウド環境利用時の企業内ガバナンス体制の確立などを行うことができます。CloudStack とパブリック・クラウドを接続したハイブリッドクラウド環境を実現するうえで、enStratus は極めて有力な選択肢といえるでしょう。9.1.3	Chef概要Chef とは、米 Opscode 社が提供するクラウド・コンピューティングをはじめとするシステム環境構築自動化に特化したオープンソース型システム統合フレームワークです。構築段階、あるいは運用中のクラウドやシステムが複雑な場合でも、Chef を利用することで必要となるサーバーやアプリケーションの機能を自動的に設定・構築することができます。従来、プログラマーやシステムエンジニア個々のスクリプトや経験に委ねられていたシステム運用管理をプログラミング可能とし、自動的な拡張や再構築を実施することが可能となることが主な特徴です。 図.9-2-1. chef のアーキテクチャchef の主なメリットchef を利用することによる主なメリットとして、(1) 管理システムの簡素化、 (2) 管理コストの削減の二つが挙げられます。(1)	管理システムの簡素化 : Chef を構成する Roles (= サーバーが担うべき役割) 、Recipe (= Rolesにもとづき、必要なリソースおよびアプリケーションを定義する仕組み) 、Cookbook (= Roles, Recipe など、アプリケーションの自動構成管理に必要な一式がパッケージ化されているもの) を用いてシステムの展開を行うことで、運用の自動化を行うことができます。従来、システムの拡張、再構築を行うにはシステムを構成する従来のサーバー、また新たなサーバーに対して設定情報の変更を加える必要がありました。しかし、クラウド環境などシステム規模が拡大すると、システムの変更毎に変更箇所が飛躍的に増大していきます。こうした変更を手動、あるいはスクリプトを用いて行うことは予期せぬヒューマンエラーを招く可能性があります。Chef を導入することで、こうした変更を自動的に実行することが可能となります。また、Chef にはknife と呼ばれるコマンドラインインターフェースも実装されています。(2)	管理コストの削減: Chef を用いることでシステムの拡大時や再構築時も、Cookbook や Recipe を活用することができます。また、こうした Cookbook や Recipe は Chef コミュニティで提供されているものを利用することが可能で、必要に応じカスタマイズすることができます。図9-2-1. は、Chef のアーキテクチャを示しています。 Chef が導入されたクライアントとサーバー間では、APIを通じて構成情報をアップデートします。このような構成情報のアップデートは、ワークステーションを通じて行うことが可能です。また、同様の運用管理ソリューションとして知られるPuppet との違いとして、(1) 他のツールと簡単に連携を行える RESTful な API を採用していること、(2) Internal DSL を採用していること、(3) Recipe に指定されている手順でコンフィグレーションが指定されるため、環境に依存しない管理が行えること等が挙げられます。 導入事例Chef の活用例は Opscode 社のWeb サイトにも数多く掲載されていますが、ここでは Google Admeld の事例をご紹介します。 事例) Google Admeld Google Admeld は月400億円以上の取引を行う広告企業であり、データセンターは世界各地に六ヶ所存在します。広告取引量の急激な増大、それに従うインフラストラクチャの規模拡大に従い、運用サーバーは数千台まで増加し、結果従来の方法ではシステムのメンテナンスおよびアップデートを行うことが困難となりました。 また、従来はこうしたメンテナンスやアップデートをエンジニアが手動で行なっていましたが、ヒューマンエラーや予期せぬ事象などによりシステム拡張や更新時不具合が発生するようになりました。従来の方法では、システム全体を効率的かつ安定して運用することが極めて困難となったのです。 そこで、拡張性のあるインフラストラクチャを実現するため、同社はChef の導入を行いました。これにより、ビジネスの急速な成長に併せたサーバー展開が可能となり、またプラットフォーム全体に対する設定変更、拡張、パッチ適用などもより効率的かつ迅速に実現できるようになりました。またChef 導入以前、新たな開発環境の構築には数日を要していました。 しかし、Chef を導入することで必要なサーバリソースの確保、初期設定などを自動で行うことが可能となり数十分まで短縮することができるようになりました。CloudStack との連携 – knife-cloudstack -Knife-cloudstack とは、Chef のコマンドラインインターフェースである Knife コマンドの CloudStack 用プラグインです。Knife コマンドから CloudStack API を通じ、CloudStack の操作を行うことが可能となります。RubyGems を用いてknife-cloudstack を導入し、操作をしたい CloudStack の API 情報を取得します。これには、API の URI、APIキー、秘密鍵の３つが必要となります。以下のように、それらを Knife コマンドの設定ファイルに記載します。cf@ubuntu:~$ mkdir .chefcf@ubuntu:~$ cat > .chef/knife.rbknife[ :cloudstack_url ] = 'http://xxx.xxx.xxx.xxx:8080/client/api'knife[ :cloudstack_api_key ] = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'knife[ :cloudstack_secret_key ] = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'cf@ubuntu:~$コマンド1. API 鍵の設定Knife-cloudstack の実行には “knife cs” を用います。ネットワーク一覧を取得するには、”knife cs network list” を用います。buntu:~$ knife cs network listName                Type                Default             Shared              Gateway             NetmaskAll Mighty          Shared                                                      172.16.114.0        255.255.255.0Monitoring Network  Shared                                                      172.16.103.1        255.255.255.0コマンド2. “knife cs network list” の実行この他にも、knife-cloudstack を用いることで、仮想マシンの作成/起動/停止/再起動、サーバー/テンプレート/ネットワーク表示、アカウントに結び付けられたゾーンやネットワークの表示を行うことができます。詳細については、クリエーションライン株式会社 Web サイト (http://www.creationline.com/) “CL Lab” の 『knife-cloudstack を使ってみよう[1], [2]』 をご覧ください。まとめ chef は CloudStack をはじめとするクラウド基盤ソフトウェアによってコンピューティングリソースの構築、展開が用意になった分、ボトルネックとして顕在化した初期設定や設定変更の煩雑さを解消するための総合的なフレームワークです。また、chef を用いて CloudStack を管理することで、仮想マシンの展開と初期設定を一連の作業として自動化することが可能となります。 CloudStack を導入する際 chef を併せて導入することで、プライベート・クラウド環境下におけるコンピューティングリソースの迅速な展開、運用管理が実現できるようになるのです。