9.1.2	enStratus
概要
enStratus とは、米国enStratus Networks社が開発したクラウドフェデレーションツール (CFS) ソリューションです。
enStratus を導入することで、複数のクラウド環境の運用管理をひとつのインターフェースに集約し、
クラウド運用統合基盤 (CloudStack, OpenStack) や国、地域で異なるデータセンター間で独立していた運用体制を一元化することが可能になります。
この統合管理機能は、Amazon EC2 などのパブリック・クラウドとCloudStackなどを用いて構築したプライベート・クラウドを一元管理することも可能にします。
enStratusは、インスタンス状態を管理するだけではなく、利用したインスタンスの費用を管理するための仕組みやインシデントを管理する仕組みも搭載しています。また、暗号化、アラート、ログ管理機能によるガバナンス体制の強化も特徴です。組織内でのクラウドの利用が拡大すると、それに関わる事務的管理業務も一気に煩雑化していきます。先のようなバックオフィス業務をも一元管理のスコープに入れることで、ビジネスでのクラウドの利用をより現実化しています。

 
図9.1.2.1 enStratus の概要

  enStratus のメリット

クラウド管理環境として enStratus を導入するメリットとして、

  (1) 多種多様のクラウドでのプロビジョニングを可能とする、インフラストラクチャ管理機能を搭載していること
  (2) 運用監視、予算／費用の管理など、企業がクラウドを利用する上で必要不可欠な機能を搭載していること
  (3) 

(1) 対応するパブリック・プライベートクラウド
enStratus は Amazon Web Services (AWS), Rackspace Hosting, Windows Azure などといったパブリック・クラウドサービスと
CloudStack, OpenStack, Eucalyptus, VMware などといったプライベート・クラウドサービスの接続が可能です。enStaratus自体もAPIを公開しており、 このAPIを介して既にenStratusに登録を済ませているクラウドを運用することもできます。
 
(2) インフラストラクチャ管理機能
enStratus にクラウドを登録するには、クラウドサービスごとの認証情報を事前に登録しておく必要があります。

例えば、AWS の場合 (1) AWS アカウント番号 (2) AWS アクセスキーID (3) AWS 秘密アクセスキー (4) AWS 証明書などを指定する必要があります。

これらの情報を登録することで、enStratus の Web インターフェースを通じてインスタンスの起動/停止/再起動、
インスタンスの一覧の表示、ボリュームの作成などを行うことができます。

CloudStack においても同様に一括して管理することが可能です。
  
 
図9.1.2.2 インフラストラクチャ管理画面

(3) モニタリング、ファイナンス管理機能
パブリック・クラウド環境では利用したリソースの量に基づき課金されます。
enStratus を導入することで、事前に割り当てた予算以上のリソースの利用を防ぐことができるようになります。
予算設定 (Budget) 機能では、インスタンスを起動するクラウドサービスごとに利用上限額を任意のグループごとに指定することができます。
利用可能額として、ソフトクォータ(警告レベル)とハードクォータ(制限レベル)のふたつを用意しています。

グループ内における一か月のリソース使用額がソフトクォータに達した場合は、警告が行われますがまだリソースの起動は可能です。
しかし、ハードクォータに達した場合は、既に起動しているインスタンスは止まることはありませんが、新しいリソースを起動することは不可能となります。
こうした予算管理は、クラウドごとに紐付けられたアカウントとは別の、独立したグループに設定することが可能です。

(4)セキュリティ管理 (キー管理、暗号化)機能

　{ここに説明を書く〜。}  ;)

また、その他の機能として、モニタリング(クラウド上での重要な事象の通知)、自動化(自動スケーリングや自動復旧、バックアップやディザスタリカバリ)などを提供しています。

導入事例
enStratus はICT系企業のみならず、幅広い産業エリアでの利用実績があります。
ここでは、 enStratus の Web サイトに掲載されている企業の導入事例をいくつかご紹介します。

(1) 
グローバルな金融サービスを提供するフィナンシャル企業での例です。この企業では自社内のデータセンター上に構築したプライベート・クラウドおよび複数のパブリック・クラウド環境に様々なアプリケーションを展開しデータを補完していました。enStratus の導入以前は、これらの環境を個別の GUI, API を用いて管理していました。
こうした管理の煩雑さを解消するためにenStratusを導入し、複数のクラウド環境を一元的なインターフェースで管理することが可能となりました。

(2) 
オンラインコマース向けプラットフォームを提供する企業での例です。この企業では従来、複数の開発チームが自社データセンター上に構築したプライベート・
クラウドを独立して運用していました。そのため、ある開発チームにリソースの余裕があった場合も他の開発チームからそれらのリソースを利用できないなど、クラウドの可用性メリットを十分に活用できない状態が発生していました。
また、各クラウドが独立して運用されている故に、セキュリティ上の問題の発生していました。このような状況を改善し、全社的な運用コストの最適化、コンプライアンスの実現を達成するため、enStratusを導入しました。
これにより社内のプライベート・クラウド環境を一元的に管理することで、ガバナンスとスケーラビリティを実現することが可能となりました。

(3) 
建設会社での導入例です。この企業では顧客との契約により利用中のアプリケーションおよび顧客データのバックアップを作成し、都度管理する必要が生じました。
しかし、従来の運用環境ではクラウド全体のバックアップ作成を定期的に実施し、都度管理を行うことは極めてコストがかかる作業でした。
DR対応を実現し、こうした実運用環境において一貫性のあるガバナンスと自動化を実現するため、enStratus を導入しました。

まとめ
enStratus を導入することで、
(1) パブリック・クラウドおよび CloudStack をはじめとするプライベート・クラウドを利用したマルチクラウドを運用する際の管理コストの最適化
(2) クラウド環境上のインスタンス管理に加え、課金管理などクラウド運用にかかわるバックオフィス業務の簡素化
(3) 暗号化、アラート、ログ管理 (セキュリティ・モニタリング等) により、クラウド環境利用時の企業内ガバナンス体制の確立
などを行うことができます。

従って、CloudStack とパブリック・クラウドを接続したハイブリッドクラウド環境を実現するうえで、enStratus は極めて有力な選択肢といえるでしょう。







9.1.3	Chef
概要
Chef とは、米 Opscode 社が提供する、システム環境構築自動化に特化したオープンソース型システム統合フレームワークです。
Chefを利用することでJeOS (Just enough OS:ジュース) 上にサーバー自体の設定、ミドルウェア設定とそれらの連帯管理を自動化することができます。
プログラマーやシステムエンジニアが個々に作成したスクリプトや技芸に委ねられていた従来のシステム運用管理を、広く公開された形式でプログラミング可能とし、
自動的な拡張や再構築を迅速かつ安定的に実施できるようにしました。さらに広く公開された形式で記述されている設定内容は、モジュール化され再利用性が高く、必要最低限のプログラミングという作業効率の良さも実現しています。
 
図.9-2-1. Chef のアーキテクチャ

Chef の主なメリット
Chef を利用することによる主なメリットとして、

======
(1) {書き直し！！}
(2) {書き直し！！}
======

の二つが挙げられます。


# 上記のメリットに合わせて書き直した方が良いと思います。
=====
(1)	管理システムの簡素化 : 
Chef を構成する Roles (= サーバーが担うべき役割) 、Recipe (= Rolesにもとづき、必要なリソースおよびアプリケーションを定義する仕組み) 、Cookbook (= Roles, Recipe など、アプリケーションの自動構成管理に必要な一式がパッケージ化されているもの) を用いてシステムの展開を行うことで、運用の自動化を行うことができます。
従来、システムの拡張、再構築を行うにはシステムを構成する従来のサーバー、また新たなサーバーに対して設定情報の変更を加える必要がありました。しかし、クラウド環境などシステム規模が拡大すると、システムの変更ごとに変更箇所が飛躍的に増大していきます。こうした変更を手動、あるいはスクリプトを用いて行うことは予期せぬヒューマンエラーを招く可能性があります。
Chef を導入することで、こうした変更を自動的に実行することが可能となります。また、Chef はknife と呼ばれるコマンドラインインターフェースを実装しています。
(2)	管理コストの削減:
Chef を用いることでシステムの拡大時や再構築時も、Cookbook や Recipe を活用することができます。また、こうした Cookbook や Recipe は Chef コミュニティが提供しているものを利用することが可能で、必要に応じカスタマイズすることができます。
======

図9-2-1. は、Chef のアーキテクチャを示しています。

構成情報の管理は、Chef Serverで実施できますが、ワークステーションと呼ばれる踏み台操作環境を通じて行うことが可能です。
Chef Client を導入したサーバーでは、pull型で構成情報をアップデートします。

また、同様の運用管理ソリューションとして知られるPuppet との違いとして、
(1) 他のツールからChef Serverをコントロールするための RESTful な API を公開していること、
(2) Rubyの文法形式を採用したInternal DSL によって、設定時の細かい要求に対応しやすいこと、
(3) Recipe に指定されている手順で設定操作が実施されるため、意図したタイミングで意図した設定が実施でること等が挙げられます。 


導入事例
Chef の活用例は Opscode 社のWeb サイトにも数多く掲載されていますが、ここでは Google Admeld の事例をご紹介します。

事例) Google Admeld
Google Admeld は月400億円以上の取引を行う広告企業です。データセンターは世界各地に六か所存在します。
広告取引量の急激な増大に従うインフラストラクチャの規模拡大によって運用サーバーは数千台まで増加しました。
その結果、従来の方法ではシステムのメンテナンスおよびアップデートを実施することが困難となりました。
Chef採用以前はメンテナンスやシステムアップデートをエンジニアが手動で行なっていました。
運用台数が急増する過程で、エンジニアの操作ミスや予期せぬ事象によりシステム拡張や更新時に不具合が連続発生するようになりました。
従来の方法では、システム全体を効率的かつ安定して運用することが極めて困難となったのです。
この問題に対しChefによる自動化で人為的ミスを排除するように心がけました。

自動化より、ビジネスの急速な成長に併せたサーバー展開が可能となり、プラットフォーム全体に対する設定変更、拡張、パッチ適用などもより効率的かつ迅速に実現できるようになりました。
Chefの導入以前は、新たな開発環境の構築には数日を要していましたが、導入後は必要なサーバーリソースの確保、初期設定などを自動で行うことが可能となり数十分まで短縮することができるようになりました。

CloudStack との連携 - knife-cloudstack -

knife-cloudstack とは、Chef のコマンドラインインターフェースである knife コマンドの CloudStack 用プラグインです。
kinfe-cloudstack をワークステーションにインストールすることによって、knife コマンドから CloudStack API を通じ、CloudStack のインスタンスやネットワークなどの操作を行うことが可能となります。

プラグインは、gem形式で配布されています。
cf@ubuntu:~$ sudo gem install knife-cloudstack

尚、knife-cloudstack-fogというCloudStack様のプラグインもあり、実際に環境設定先としているCloudStackのシステム構成に合わせて使い分けるとよいでしょう。

APIを介して、CloudStackと通信するためには、API の URI、APIキー、秘密鍵の３つが必要となります。
従って以下のように、それらを knife コマンドの設定ファイルに記載します。

cf@ubuntu:~$ mkdir .chef
cf@ubuntu:~$ cat > .chef/knife.rb
knife[ :cloudstack_url ] = 'http://xxx.xxx.xxx.xxx:8080/client/api'
knife[ :cloudstack_api_key ] = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
knife[ :cloudstack_secret_key ] = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
cf@ubuntu:~$
コマンド1. API 鍵の設定

knife-cloudstack の実行には “knife”　の次に ”cs” を用いてサブコマンドを発行します。
ネットワーク一覧を取得するには、”knife cs network list” となります。

buntu:~$ knife cs network list
Name                Type                Default             Shared              Gateway             Netmask
All Mighty          Shared                                                      172.16.114.0        255.255.255.0
Monitoring Network  Shared                                                      172.16.103.1        255.255.255.0
コマンド2. “knife cs network list” の実行

knife-cloudstack を用いることで、インスタンスの作成/起動/停止/再起動、サーバー/テンプレート/ネットワークの表示、アカウントに結び付けられたゾーンやネットワークの表示が可能です。

knife-cloudstackの詳細については、クリエーションライン株式会社 Web サイト (http://www.creationline.com/) “CL Lab” の 『knife-cloudstack を使ってみよう[1], [2] 』をご覧ください。

まとめ
Chef は CloudStack をはじめとするクラウド運用統合基盤によってコンピューティングリソースの構築、展開が用意になった分、ボトルネックとして顕在化した初期設定や設定変更の煩雑さを解消するための総合的なフレームワークです。
Chef を用いて CloudStack を管理することで、仮想インスタンスの管理と初期設定、オーケストレーションを一連の作業として自動化することが可能となります。 
先に紹介したような、knifeのプラグインが他のクラウド運用統合基盤に向けても多数存在しており、CloudStack を導入する際 Chef を併せて導入することで、ハイブリッド・クラウド環境下での運用を念頭においた運用を開始すると同時に、迅速
で安定したシステムの運用が可能となります。
